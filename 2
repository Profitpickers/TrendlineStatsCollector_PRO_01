//+------------------------------------------------------------------+
//| TrendlineStatsCollector_PRO_01_v1.06.mq5                         |
//| Copyright 2025, ProfitPickers - vitoiacobellis.it                |
//| https://www.vitoiacobellis.it                                    |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, ProfitPickers - vitoiacobellis.it"
#property link      "https://www.vitoiacobellis.it"
#property version   "1.06"
#property strict
#property description "EA di analisi trendline macro-micro, delta e dashboard statistica."

#include <Trade/Trade.mqh>
#include <ChartObjects/ChartObjectsLines.mqh>
#include "../Include/CTradeDecisionManager.mqh"
#include "../Include/CTradeExecutor.mqh"
#include "../Include/CVolumeManager.mqh"

// === STRATEGIA 1 ===
input bool enable_strategy_1      = true;
input bool invert_strategy_1      = false;
input int  magic_strategy_1       = 123456;

// === STRATEGIA 2 ===
input bool enable_strategy_2      = true;
input bool invert_strategy_2      = false;
input int  magic_strategy_2       = 223456;

// === Dashboard ===
input int micro_bars = 10;
input int macro_bars = 50;
input int extra_bars = 300;
input int count_window = 20;

// === Risk Management e Volume ===
input double inp_base_volume      = 0.01;
input double inp_max_volume       = 0.1;
input double inp_initial_capital = 1000.0;
input int    inp_sl_pips          = 30;
input int    inp_tp_pips          = 50;

// === Strategia RM dinamico ===
input ENUM_LOT_STRATEGY inp_lot_strategy = FIXED_LOT;
input double inp_increment_index         = 0.1;
input double inp_martingale_mult         = 2.0;
input double inp_sum_increment           = 0.01;
input bool   inp_use_volume_reset        = true;
input double inp_reset_trigger_percent   = 10.0;

// === Trail dinamico ===
input double inp_spike_threshold_points  = 300;
input double inp_profit_trigger_points   = 200;
input double inp_trail_pips              = 50;
input double inp_momentum_base           = 30;
input double inp_momentum_min_factor     = 1.0;
input double inp_momentum_max_factor     = 3.0;

// === Generali ===
input string inp_label = "TrendlinePRO";

// === Variabili globali ===
datetime last_extra_update = 0;
int extra_interval_sec = 300;
string labels_left[6] = {"MICRO", "MACRO", "EXTRA", "UPTrend", "DOWNtrend", "SUPPORT"};
string labels_right[6] = {"Î” Mac-Mic", "Î” Mac-Ext", "Î” Ext-Mic", "DIST", "MAXpick", "MINpick"};
string left_vals[6], right_vals[6];

CTradeDecisionManager decision;
CTradeExecutor executor;
CVolumeManager volumeManager;


// === INIT ===
int OnInit() {
    volumeManager.Configure(
        inp_lot_strategy,
        inp_base_volume,
        inp_max_volume,
        inp_initial_capital,
        inp_increment_index,
        inp_martingale_mult,
        inp_sum_increment,
        inp_use_volume_reset,
        inp_reset_trigger_percent
    );
    volumeManager.SetDebugMode(true);

    executor.Configure(inp_sl_pips, inp_tp_pips, inp_trail_pips, 0, inp_label);
    executor.volume = volumeManager;

    for(int i=0; i<6; i++) {
        string lid = "LabelLeft" + IntegerToString(i);
        ObjectCreate(0,lid,OBJ_LABEL,0,0,0);
        ObjectSetInteger(0,lid,OBJPROP_CORNER,CORNER_LEFT_UPPER);
        ObjectSetInteger(0,lid,OBJPROP_XDISTANCE,10);
        ObjectSetInteger(0,lid,OBJPROP_YDISTANCE,20+i*15);
        ObjectSetInteger(0,lid,OBJPROP_COLOR,clrYellow);
        ObjectSetInteger(0,lid,OBJPROP_FONTSIZE,10);

        string rid = "LabelRight" + IntegerToString(i);
        ObjectCreate(0,rid,OBJ_LABEL,0,0,0);
        ObjectSetInteger(0,rid,OBJPROP_CORNER,CORNER_LEFT_UPPER);
        ObjectSetInteger(0,rid,OBJPROP_XDISTANCE,240);
        ObjectSetInteger(0,rid,OBJPROP_YDISTANCE,20+i*15);
        ObjectSetInteger(0,rid,OBJPROP_COLOR,clrYellow);
        ObjectSetInteger(0,rid,OBJPROP_FONTSIZE,10);
    }

    return INIT_SUCCEEDED;
}

// === DEINIT ===
void OnDeinit(const int reason) {
    for(int i=0;i<6;i++) {
        ObjectDelete(0,"LabelLeft"+IntegerToString(i));
        ObjectDelete(0,"LabelRight"+IntegerToString(i));
    }
    for(int i=0;i<3;i++) ObjectDelete(0,"Trendline"+IntegerToString(i));
    ObjectDelete(0, "VolumeOverlay");
}

// === TICK PRINCIPALE ===
void OnTick() {
    UpdateTrendline("Trendline0", micro_bars);
    UpdateTrendline("Trendline1", macro_bars);

    if(TimeCurrent()-last_extra_update>=extra_interval_sec) {
        UpdateTrendline("Trendline2", extra_bars);
        last_extra_update = TimeCurrent();
    }

    CalculateMetrics();
    UpdateLabels();
    ApplyTrailingStop((int)inp_trail_pips);

    if (PositionSelect(_Symbol)) return;

    double a_micro = GetSlope("Trendline0");
    double a_macro = GetSlope("Trendline1");
    double a_extra = GetSlope("Trendline2");
    double dist = (iClose(_Symbol,_Period,0) - ObjectGetDouble(0,"Trendline2",OBJPROP_PRICE,1)) / _Point;
    double delta_mm = MathAbs(a_macro - a_micro);
    double delta_me = MathAbs(a_macro - a_extra);
    double delta_em = MathAbs(a_extra - a_micro);

    int up = CountUP(count_window);
    int down = CountDOWN(count_window);
    int support = CountSUPPORT(count_window);

    decision.LoadData(a_micro, a_macro, a_extra, delta_mm, delta_me, delta_em, dist, up, down, support);

    if (enable_strategy_1 && decision.CheckCompressionBUY()) {
        Print("ðŸ”¼ S1 BUY - ", decision.StrategyLabel);
        executor.OpenBuy();
    }
    else if (enable_strategy_1 && decision.CheckCompressionSELL()) {
        Print("ðŸ”½ S1 SELL - ", decision.StrategyLabel);
        executor.OpenSell();
    }

    // Strategy 2 placeholder: Contrarian o altri (future)
}

// === FUNZIONI DI SUPPORTO ===
void UpdateTrendline(string name, int bars_back) {
    if(Bars(_Symbol,_Period)<bars_back) return;
    datetime t1 = iTime(_Symbol,_Period,bars_back);
    double p1 = iClose(_Symbol,_Period,bars_back);
    datetime t2 = iTime(_Symbol,_Period,0);
    double p2 = iClose(_Symbol,_Period,0);

    if(ObjectFind(0,name)<0)
        ObjectCreate(0,name,OBJ_TREND,0,t1,p1,t2,p2);
    else {
        ObjectMove(0,name,0,t1,p1);
        ObjectMove(0,name,1,t2,p2);
    }
    double angle = GetSlope(name);
    ObjectSetInteger(0,name,OBJPROP_COLOR,(angle>=0)?clrLime:clrRed);
    ObjectSetInteger(0,name,OBJPROP_WIDTH,StringToInteger(StringSubstr(name,-1))+1);
}

double GetSlope(string obj) {
    long t1_raw, t2_raw;
    if(!ObjectGetInteger(0, obj, OBJPROP_TIME, 0, t1_raw) ||
       !ObjectGetInteger(0, obj, OBJPROP_TIME, 1, t2_raw))
        return 0.0;

    datetime t1 = (datetime)t1_raw;
    datetime t2 = (datetime)t2_raw;
    double p1 = ObjectGetDouble(0, obj, OBJPROP_PRICE, 0);
    double p2 = ObjectGetDouble(0, obj, OBJPROP_PRICE, 1);
    double dx = (double)(t2 - t1) / 60.0;
    double dy = (p2 - p1) / _Point;
    double factor = 2.0;

    if(dx == 0.0) return 0.0;
    return MathArctan((dy / dx) * factor) * 180.0 / M_PI;
}

void CalculateMetrics() {
    double a0 = GetSlope("Trendline0");
    double a1 = GetSlope("Trendline1");
    double a2 = GetSlope("Trendline2");
    double dist = (iClose(_Symbol,_Period,0)-ObjectGetDouble(0,"Trendline2",OBJPROP_PRICE,1))/_Point;

    left_vals[0]=StringFormat("%.2f",a0);
    left_vals[1]=StringFormat("%.2f",a1);
    left_vals[2]=StringFormat("%.2f",a2);
    left_vals[3]=IntegerToString(CountUP(count_window));
    left_vals[4]=IntegerToString(CountDOWN(count_window));
    left_vals[5]=IntegerToString(CountSUPPORT(count_window));

    right_vals[0]=StringFormat("%.2f",MathAbs(a0-a1));
    right_vals[1]=StringFormat("%.2f",MathAbs(a1-a2));
    right_vals[2]=StringFormat("%.2f",MathAbs(a2-a0));
    right_vals[3]=StringFormat("%.1f",dist);
    right_vals[4]=(a0 > a1 && a1 > a2)?"â†‘":(a0 < a1 && a1 < a2)?"â†“":"âž”";
    right_vals[5]=right_vals[4];
}

void UpdateLabels() {
    for(int i=0;i<6;i++) {
        string lid = "LabelLeft"+IntegerToString(i);
        string rid = "LabelRight"+IntegerToString(i);
        ObjectSetString(0,lid,OBJPROP_TEXT,labels_left[i]+": "+left_vals[i]);
        ObjectSetString(0,rid,OBJPROP_TEXT,labels_right[i]+": "+right_vals[i]);
    }
}

int CountUP(int window) {
    int count = 0;
    for(int i=1; i<=window; i++) {
        double ma = GetSlope("Trendline1");
        double mi = GetSlope("Trendline0");
        if(mi > ma) count++;
    }
    return count;
}

int CountDOWN(int window) {
    int count = 0;
    for(int i=1; i<=window; i++) {
        double ma = GetSlope("Trendline1");
        double mi = GetSlope("Trendline0");
        if(mi < ma) count++;
    }
    return count;
}

int CountSUPPORT(int window) {
    int count = 0;
    for(int i=1; i<=window; i++) {
        double a0 = GetSlope("Trendline0");
        double a1 = GetSlope("Trendline1");
        double a2 = GetSlope("Trendline2");
        if((a0 > 0 && a1 > 0 && a2 > 0) || (a0 < 0 && a1 < 0 && a2 < 0))
            count++;
    }
    return count;
}

void ApplyTrailingStop(int trailPips) {
    if (PositionsTotal() == 0) return;

    double momentum = GetMomentumCurrentTF();
    double factor = NormalizeMomentum(momentum);
    double adjustedTrail = trailPips / factor;

    for (int i = 0; i < PositionsTotal(); i++) {
        ulong ticket = PositionGetTicket(i);
        if (!PositionSelectByTicket(ticket)) continue;

        string symbol = PositionGetString(POSITION_SYMBOL);
        double price = (PositionGetInteger(POSITION_TYPE) == POSITION_TYPE_BUY)
                       ? SymbolInfoDouble(symbol, SYMBOL_BID)
                       : SymbolInfoDouble(symbol, SYMBOL_ASK);
        double sl = PositionGetDouble(POSITION_SL);
        double tp = PositionGetDouble(POSITION_TP);
        double open = PositionGetDouble(POSITION_PRICE_OPEN);
        long type = PositionGetInteger(POSITION_TYPE);
        int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
        double point = SymbolInfoDouble(symbol, SYMBOL_POINT);

        double new_sl;
        if (type == POSITION_TYPE_BUY) {
            new_sl = NormalizeDouble(price - adjustedTrail * point, digits);
            if (sl < new_sl)
                trade.PositionModify(ticket, new_sl, tp);
        }
        else if (type == POSITION_TYPE_SELL) {
            new_sl = NormalizeDouble(price + adjustedTrail * point, digits);
            if (sl > new_sl || sl == 0.0)
                trade.PositionModify(ticket, new_sl, tp);
        }
    }
}

double GetMomentumCurrentTF() {
    double open = iOpen(_Symbol, _Period, 0);
    double close = iClose(_Symbol, _Period, 0);
    return MathAbs(close - open) / _Point;
}

double NormalizeMomentum(double momentum) {
    return MathMin(inp_momentum_max_factor, MathMax(inp_momentum_min_factor, momentum / inp_momentum_base));
}
